SESSION 1
++++++++++++++

**Introduction to Linux:-**
--------------------------------------
--Linux is a community of open-source Unix like operating systems that are based on the Linux Kernel.
-- It was initially released by Linus Torvalds on September 17, 1991.
-- It is a free and open-source operating system and the source code can be modified and distributed to anyone commercially or
 noncommercially under the GNU General Public License.

**Linux Distribution:-**
-----------------------------------
Around 600 + Linux Distributions are available and some of the popular Linux distributions are: 

MX Linux
Manjaro
Linux Mint
elementary
Ubuntu
Debian
Solus
Fedora
openSUSE

**Architecture of Linux
Linux architecture has the following components: 
1] APPLICATION
2]SHELL
3]KERNEL
4]HARDWARE
5]UTILITIES

//Kernel://
-------------------
1] Kernel is the core of the Linux based operating system.
--Different types of the kernel are: 
Monolithic Kernel
Hybrid kernels
Exo kernels
Micro kernels
 
2]System Library: Isthe special types of functions that are used to implement the functionality of the operating system.
3]Shell: It is an interface to the kernel which hides the complexity of the kernel’s functions from the users. 
It takes commands from the user and executes the kernel’s functions.
4]Hardware Layer: This layer consists all peripheral devices like RAM/ HDD/ CPU etc.
5]System Utility: It provides the functionalities of an operating system to the user.

**Advantages of Linux**
--------------------------------------
1]Open-source operating system.
2]The software updates in Linux are easy and frequent.
3]Linux is freely available to use on the internet.
4]It has large community support.
5]It provides high stability.
6]It maintain the privacy of the user.

**Disadvantages of Linux**
-------------------------------------------
1]It is not very user-friendly. So, it may be confusing for beginners.
2]It has small peripheral hardware drivers as compared to windows.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SESSION 2
+++++++++++++
**Development Tools & Utilities**
--------------------------------------------------

//Compiling in C Program//
-------------------------------------
Preprocessor
Compiler
Assembler
Linker


Preprocessor
The source code is the code which is written in a text editor and the source code file is given an extension ".c". This source code is first passed to the preprocessor, and then the preprocessor expands this code. After expanding the code, the expanded code is passed to the compiler.

Compiler
The code which is expanded by the preprocessor is passed to the compiler. The compiler converts this code into assembly code. Or we can say that the C compiler converts the pre-processed code into assembly code.

Assembler
The assembly code is converted into object code by using an assembler. The name of the object file generated by the assembler is the same as the source file. The extension of the object file in DOS is '.obj,' and in UNIX, the extension is 'o'. If the name of the source file is 'hello.c', then the name of the object file would be 'hello.obj'.

Linker
Mainly, all the programs written in C use library functions. These library functions are pre-compiled, and the object code of these library files is stored with '.lib' (or '.a') extension. 
 
//Makefile// 
 defines set of tasks to be executed. 


//Overview of GDB tool//
GDB stands for GNU Project Debugger and is a powerful debugging tool for C(along with other languages like C++). 
It helps you to poke around inside your C programs while they are executing and also allows you to see what exactly happens when your program crashes.


//OBJDUMP//
objdump to display a range of information about a binary file.
 objdump -d disassembles a file (similar to disas in gdb). 
objdump -t displays symbol table information.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SESSION 3:-
+++++++++++++

**System Calls in Linux**
-------------------------------------
A system call is a procedure that provides the interface between a process and the operating system.
 It is the way by which a computer program requests a service from the kernel of the operating system.

//System calls are divided into 5 categories mainly ://

Process Control
File Management
Device Management
Information Maintenance
Communication

Process Control :
This system calls perform the task of process creation, process termination, etc.

The Linux System calls under this are fork() , exit() , exec().

fork()
A new process is created by the fork() system call.
A new process may be created with fork() without a new program being run-the new sub-process simply continues to execute exactly the same program that the first (parent) process was running.
It is one of the most widely used system calls under process management.
exit()
The exit() system call is used by a program to terminate its execution.
The operating system reclaims resources that were used by the process after the exit() system call.
exec()
A new program will start executing after a call to exec()
Running a new program does not require that a new process be created first: any process may call exec() at any time. The currently running program is immediately terminated, and the new program starts executing in the context of the existing process.
File Management :
File management system calls handle file manipulation jobs like creating a file, reading, and writing, etc. The Linux System calls under this are open(), read(), write(), close().

open():
It is the system call to open a file.
This system call just opens the file, to perform operations such as read and write, we need to execute different system call to perform the operations.
read():
This system call opens the file in reading mode
We can not edit the files with this system call.
Multiple processes can execute the read() system call on the same file simultaneously.
write():
This system call opens the file in writing mode
We can edit the files with this system call.
Multiple processes can not execute the write() system call on the same file simultaneously.
close():
This system call closes the opened file.
Device Management :
Device management does the job of device manipulation like reading from device buffers, writing into device buffers, etc. The Linux System calls under this is ioctl().

ioctl():
ioctl() is referred to as Input and Output Control.
ioctl is a system call for device-specific input/output operations and other operations which cannot be expressed by regular system calls.
Information Maintenance:
It handles information and its transfer between the OS and the user program. In addition, OS keeps the information about all its processes and system calls are used to access this information. The System calls under this are getpid(), alarm(), sleep().

getpid():
getpid stands for Get the Process ID.
The getpid() function shall return the process ID of the calling process.
The getpid() function shall always be successful and no return value is reserved to indicate an error.
alarm():
This system call sets an alarm clock for the delivery of a signal that when it has to be reached.
It arranges for a signal to be delivered to the calling process.
sleep():
This System call suspends the execution of the currently running process for some interval of time
Meanwhile, during this interval, another process is given chance to execute
Communication :
These types of system calls are specially used for inter-process communications.

Two models are used for inter-process communication

Message Passing(processes exchange messages with one another)
Shared memory(processes share memory region to communicate)
The system calls under this are pipe() , shmget() ,mmap().

pipe():
The pipe() system call is used to communicate between different Linux processes.
It is mainly used for inter-process communication.
The pipe() system function is used to open file descriptors.
shmget():
shmget stands for shared memory segment.
It is mainly used for Shared memory communication.
This system call is used to access the shared memory and access the messages in order to communicate with the process.
mmap():
This function call is used to map or unmap files or devices into memory.
The mmap() system call is responsible for mapping the content of the file to the virtual memory space of the process.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SESSION 4:-
+++++++++++++

**Getting Acquainted with Linux Environment**
-------------------------------------------------------------------
//Positional Parameters//
To handle options on the command line, we can use a facility in the shell called positional parameters. 
These are a series of special variables ($0 through $9) that contain the contents of the command line.

sh script.sh verbose production deploy
$0 = script.sh
$1 = verbose
$2 = production
$3 = deploy

//Getopt//
A more robust and flexible approach is to use enhanced getopt which is based on a C library that is capable of parsing 
arguments in a variety of different ways. 
It doesn’t care about the order and can handle spacing and quoting.

$ getopt --test
$ echo $?
4


//Option Types//
Getopt gives us a number of ways to accept options:
Short options
Long options
Non-option parameters

//Short options//
A short option is composed of a hyphen (-) followed by a single letter and can also include an argument.

--No arguments
$ sh script.sh -v -a

--Arguments
$ sh script.sh -f outfile.txt

Long options
A long option is composed of a two hyphens ( — ) followed by a word. It can also include an argument.
No argument
$ sh script.sh --verbose
Arguments
$ sh script.sh --file=outfile.txt

//The Option String//
In order for getopt to know what we want, we need to build an option string.
Normally, we pass 2 option strings to getopt, one for short options and the other for long options.
We can mix and match short and long options when we run our script.

//Option string for short options//
--Rules:

Each single character stands for an option.
A single colon (:) means that the option has a required argument or value.
A double colon (::) means that the option has an optional argument or value.

-Example:
Say we want our script to accept the following short options:
-v Enable verbose mode
-f <file>Specify output filename
Our option string would be:
SHORT=vf:
There are no colons following “v” because it does not accept an arguments.
 For “f”, there is a single colon following it because it requires an argument. 
Note that the order of the letters here does not matter.

//Option string for long options//
--Rules:
Options are separated by , (comma character).
A : (colon character) tells that the option has a required argument.
A :: (two consequent colon character) tells that the option has an optional argument.

Example:
Following the example above, our option string for long options would be:
LONG=verbose,file:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SESSION 5:-
++++++++++++++++++

**Libraries**
----------------------

--Static Libraries :

 A Static library or statically-linked library is a set of routines, external functions and variables which are resolved in a caller at compile-time 
and copied into a target application by a compiler, linker, or binder, producing an object file and a stand-alone executable. 

--Shared Libraries :

Shared libraries are .so (or in Windows .dll, or in OS X .dylib) files.
These are linked dynamically simply including the address of the library (whereas static linking is a waste of space). 
Dynamic linking links the libraries at the run-time.
 Thus, all the functions are in a special place in memory space, and every program can access them, 
without having multiple copies of them.